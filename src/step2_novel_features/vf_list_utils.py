""" Functions on verbal fluency lists """punk = [ '(', '#', '!', '@', '?', '*', '-' ]def read_vflist(title):    """Read VF list into memory, given title"""    fh = open(title, 'r')    raw = [ line.strip() for line in fh.readlines() ]    fh.close()    return [ el for el in raw if el ]def read_vflist_and_replace_spaces(title):    """Read VF list into memory as read_vflist, but    replace any space characters with underscores"""    fh = open(title,'r')    items = []    for item in fh.readlines():        if ' ' in item:            bitz = item.split()            if len(bitz) > 0 and bitz[0] in punk:                items.append(bitz[0] + '_'.join([ b.strip() for b in bitz[1:] ]))            elif len(bitz) > 0:                items.append('_'.join([ b.strip() for b in bitz ]))        else:            items.append(item.strip())    fh.close()    return [ item for item in items if item ]def valid_items(vf):    return [ item for item in vf if item[0] not in punk ]def valid_items_with_indices(vf):    windex = enumerate(vf)    return [ (no,item) for (no,item) in windex if item[0] not in punk ]def chop_punk(word):    if word[0] in punk:        return word[1:].strip()    else:        return worddef with_reps(vf):    auxpunk = [ p for p in punk if p != '#' ]    return [ chop_punk(item) for item in vf if item[0] not in auxpunk ]def with_reps_and_intrusions(vf):    auxpunk = [ p for p in punk if p not in ['#','!'] ]    return [ chop_punk(item) for item in vf if item[0] not in auxpunk ]def equivalent(w1,w2):    if p2s.has_key(w1):        eq = w2 == p2s[w1]    elif p2s.has_key(w2):        eq = w1 == p2s[w2]    else:        eq = False    return w1 == w2 or eqdef mark_repetitions(vf):    evf = [ tup for tup in enumerate(vf) ]    # I want reps = {(0,'cat'):[ (1,'cats') ],    reps = []    for (n1,w1) in evf[:-1]:        reps.append([(n1,w1),[]])        for (n2,w2) in evf[n1+1:]:            if equivalent(w1,w2):                reps[-1][1].append((n2,w2))    return dict([ rep for rep in reps if rep[1] ])def strip_comments(vf):    return [ word for word in vf if word[0] != '(' ]def replace_words(vf,hash):    def save_punk(word):        if word[0] == '-':            return word        elif word[0] in punk:            try:                return word[0] + hash[word[1:].strip()]            except KeyError:                print word                exit()        else: return hash[word]    return [ save_punk(word) for word in vf ]