class VF_list():    def __init__(self,filename):        """ Create a VF list object """        fh = open(filename,'r')        self.lines = [ line.strip() for line in fh.readlines() ]        self.lines = [ line for line in self.lines if line ]        fh.close()    def __call__(self):        """ Return all the items from a VF list, including comments, intrusions, etc. """        return self.lines    def valid(self):        """ Return all the items from a VF list if the first character is alphabetical """        try:            return [ el for el in self.lines if ord(el[0]) in range(65,91)+range(97,123) ]        except IndexError:            print self.lines            exit()    def raw(self):        """ Return the raw score on a VF list """        return len(self.valid())    def reps(self):        """ Return the count of repeated items (perseverations) """        return len([ el for el in self.lines if el[0] == '#' ])    def intrusions(self):        """ Return the count of intrusions """        return len([ el for el in self.lines if el[0] == '!' ])    def repair_gaps(self):        """ Find spaces and replace them with _ """        temp = []        for item in self.lines:            if item[0] in '#!@-%&?':                bitz = item.split()                woid = '_'.join(bitz[1:])                temp.append(' '.join([bitz[0],woid]))            elif item[0] == '(':                temp.append(item)            elif ' ' in item:                temp.append('_'.join(item.split()))            else:                temp.append(item)        self.lines = temp    def items(self):        '''Get all of the items (non-comment lines) from the list'''        self.repair_gaps()        tems = []        for i in self.lines:            if i[0] in '#!@%&?':                tems.append(i[1:].strip())            elif i[0] not in '(-':                tems.append(i.strip())        return tems